Declare a variable to track if sorting check passed.

Define the CUDA kernel 'gpu_merge_sort' to merge subarrays:
    Determine the thread's portion of the array to work on.
    Merge the two sorted subarrays into one sorted array.

Define the 'merge_sort' function to sort the array using GPU:
    Allocate memory on the GPU.
    Copy the array from the host to the GPU.
    Perform merge sort in a loop, doubling the width each time:
        Launch the 'gpu_merge_sort' kernel with appropriate blocks and threads.
        Swap the pointers to work on the latest sorted data.
    Copy the sorted array back to the host.
    Free the GPU memory.

Define the 'main' function:
    Initialize Caliper for profiling.
    Check for correct command line argument for THREADS_PER_BLOCK.
    Initialize an array with random integers.
    Print the array before sorting.
    Sort the array using 'merge_sort'.
    Print the sorted array.
    Check if the array is sorted and print the result.
    Clean up and finalize Caliper.
    Return from the program.